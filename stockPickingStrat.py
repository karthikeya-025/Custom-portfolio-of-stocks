import yfinance as yf
import pandas as pd
import numpy as np
from src.components import stock
from src.components import nifty50
import datetime


now = datetime.datetime.now().strftime('%Y-%m-%d')

nf50 = nifty50
nf_list =nf50.Nifty50()
stock = stock
class MomentStrat:
    def __init__(self):
        self.nf_names = nf_list.nifty_50_tickers()
        
        self.stocks = stock.Stock(stock_symbols=self.nf_names)
    def momentum_strategy(self,start,end=now,n=1):
        '''
        This function returns the 3 things:
            1.portfolio - which contains the stocks with positive returns
            2.return_dict - which contains the amount generated by these stocks
            3.daily_ret - which contains the daily return of these stocks 
        '''
        try:
            start = pd.to_datetime(start) - pd.DateOffset(1)
            portfolio = pd.DataFrame(index=pd.date_range(start = start,end = end,freq='BM'))
            port_return = pd.DataFrame(index=pd.date_range(start = start,end = end,freq='BM'))
            return_dict = {}
            for symb in self.nf_names:
                stock_data = yf.download(symb,interval='1d',start=start,end=end)
                stock_data['Returns'] = stock_data['Adj Close'].pct_change(n)
                new_stock_data = stock_data[stock_data['Returns']>0]
                positive_returns = stock_data.resample('BM').last()['Returns']>0
                new_stock_data = new_stock_data.resample('BM').last()
                positive_stocks = new_stock_data['Adj Close']
                portfolio[symb] = positive_returns.astype('int')
                port_return[symb] = positive_stocks
                daily_returns = stock_data[stock_data['Returns']>0]['Returns']
                
            for i in port_return.index:
                summed = np.sum(port_return.loc[port_return.index == i].fillna(0).values)
                return_dict[i] = summed
            return portfolio,return_dict,daily_returns
        except Exception as e:
            raise (e)
    def top_stocks(self,stock_df:pd.DataFrame):
        top_stocks = {}

        for i in stock_df :
            for j in stock_df[i]:
                if j == 1:
                    if i in top_stocks:
                        top_stocks[i] += 1
                    else:
                        top_stocks[i] = 1
        result = sorted(top_stocks.items(),key=lambda x:x[1],reverse=True)
        return result
    def equity(self,custDict,benchDict,init_eq):
        try:
            eq1 = {}
            eq2 = {}
            equity = init_eq
            for i in list(custDict.keys()):
                eq1[i] =equity+custDict[i]
            for i in list(benchDict.keys()):
                eq2[i] =equity+benchDict[i]
            return eq1,eq2
            
        except Exception as e:
            raise (e)
        
        
# if __name__ == '__main__':
#     m = MomentStrat()
#     print(m.momentum_strategy('2019-01-01'))